#include <AccelStepper.h>
#include <Servo.h>
#include <math.h>
#include <SoftwareSerial.h>

#define RX 19
#define TX 18
SoftwareSerial BT(RX, TX);

#define limitSwitch1 11
#define limitSwitch2 10
#define limitSwitch3 9
#define limitSwitch4 A3

// Define the stepper motors and the pins the will use
AccelStepper stepper1(1, 2, 5); // (Type:driver, STEP, DIR)
AccelStepper stepper2(1, 3, 6);
AccelStepper stepper3(1, 4, 7);
AccelStepper stepper4(1, 12, 13);

Servo gripperServo;  // create servo object to control a servo

const float theta1AngleToSteps = 44.444444;
const float theta2AngleToSteps = 35.555555;
const float phiAngleToSteps = 10;
const float zDistanceToSteps = 100;
const int timeSlice = 3000;

byte inputValue[5];
int k = 0;

String content = "";
int data[10];

int theta1Array[50];
int theta2Array[50];
int phiArray[50];
int zArray[50];
int gripperArray[50];
int delays[50];
int positionsCounter = 0;

void setup() {
    Serial.begin(9600);
    BT.begin(9600);

    pinMode(limitSwitch1, INPUT_PULLUP);
    pinMode(limitSwitch2, INPUT_PULLUP);
    pinMode(limitSwitch3, INPUT_PULLUP);
    pinMode(limitSwitch4, INPUT_PULLUP);

    configureSteppers();
    gripperServo.attach(A0, 600, 2500);
    delay(1000);
    Serial.println("Hello");

    memset(delays, 0, sizeof(delays));
    homing();
}

void loop() {
    if (BT.available()) {
        readBluetoothData();
        processData();
    }

    if (data[1] == 1) {
        executeSteps();
    }

    moveSteppers();
}

void configureSteppers() {
    stepper1.setMaxSpeed(4000);
    stepper1.setAcceleration(2000);
    stepper2.setMaxSpeed(4000);
    stepper2.setAcceleration(2000);
    stepper3.setMaxSpeed(4000);
    stepper3.setAcceleration(2000);
    stepper4.setMaxSpeed(4000);
    stepper4.setAcceleration(2000);
}

void readBluetoothData() {
    content = BT.readString();
    for (int i = 0; i < 10; i++) {
        int index = content.indexOf(",");
        data[i] = atol(content.substring(0, index).c_str());
        content = content.substring(index + 1);
    }
}

void processData() {
    if (data[0] == 1) {
        savePositionData();
    } else if (data[0] == 2) {
        clearPositionData();
    }
}

void savePositionData() {
    theta1Array[positionsCounter] = data[2] * theta1AngleToSteps;
    theta2Array[positionsCounter] = data[3] * theta2AngleToSteps;
    phiArray[positionsCounter] = data[4] * phiAngleToSteps;
    zArray[positionsCounter] = data[5] * zDistanceToSteps;
    gripperArray[positionsCounter] = data[6];
    delays[positionsCounter] = data[8] * timeSlice;
    positionsCounter++;
}

void clearPositionData() {
    memset(theta1Array, 0, sizeof(theta1Array));
    memset(theta2Array, 0, sizeof(theta2Array));
    memset(phiArray, 0, sizeof(phiArray));
    memset(zArray, 0, sizeof(zArray));
    memset(gripperArray, 0, sizeof(gripperArray));
    memset(delays, 0, sizeof(delays));
    positionsCounter = 0;
}

void executeSteps() {
    configureSteppersForRun();

    for (int i = 0; i < positionsCounter; i++) {
        if (data[1] == 0) {
            break;
        }
        moveToPosition(i);
        waitForMoveToEnd();
        updateGripper(i);
        delay(delays[i]);

        if (Serial.available()) {
            readSerialData();
            updateStepperSettings();
        }
    }
}

void configureSteppersForRun() {
    stepper1.setAcceleration(500);
    stepper2.setAcceleration(500);
    stepper3.setAcceleration(500);
    stepper4.setAcceleration(500);
}

void moveToPosition(int index) {
    if (digitalRead(limitSwitch1) != 1)
        stepper1.moveTo(theta1Array[index]);
    if (digitalRead(limitSwitch2) != 1)
        stepper2.moveTo(theta2Array[index]);
    if (digitalRead(limitSwitch3) != 1)
        stepper3.moveTo(phiArray[index]);
    if (digitalRead(limitSwitch4) != 1)
        stepper4.moveTo(zArray[index]);
}

void waitForMoveToEnd() {
    while (stepper1.currentPosition() != theta1Array[positionsCounter - 1] ||
           stepper2.currentPosition() != theta2Array[positionsCounter - 1] ||
           stepper3.currentPosition() != phiArray[positionsCounter - 1] ||
           stepper4.currentPosition() != zArray[positionsCounter - 1]) {
        stepper1.run();
        stepper2.run();
        stepper3.run();
        stepper4.run();
    }
}

void updateGripper(int index) {
    if (index == 0 || gripperArray[index] != gripperArray[index - 1]) {
        gripperServo.write(gripperArray[index]);
        delay(800); // wait for the servo to grab or drop
    }
}

void readSerialData() {
    content = Serial.readString();
    for (int i = 0; i < 10; i++) {
        int index = content.indexOf(",");
        data[i] = atol(content.substring(0, index).c_str());
        content = content.substring(index + 1);
    }
}

void updateStepperSettings() {
    stepper1.setSpeed(data[7]);
    stepper2.setSpeed(data[7]);
    stepper3.setSpeed(data[7]);
    stepper4.setSpeed(data[7]);
    stepper1.setAcceleration(500);
    stepper2.setAcceleration(500);
    stepper3.setAcceleration(500);
    stepper4.setAcceleration(500);
}

void moveSteppers() {
    int stepper1Position = data[2] * theta1AngleToSteps;
    int stepper2Position = data[3] * theta2AngleToSteps;
    int stepper3Position = data[4] * phiAngleToSteps;
    int stepper4Position = data[5] * zDistanceToSteps;

    stepper1.setSpeed(data[7]);
    stepper2.setSpeed(data[7]);
    stepper3.setSpeed(data[7]);
    stepper4.setSpeed(data[7]);

    stepper1.setAcceleration(500);
    stepper2.setAcceleration(500);
    stepper3.setAcceleration(500);
    stepper4.setAcceleration(500);

    stepper1.moveTo(stepper1Position);
    stepper2.moveTo(stepper2Position);
    stepper3.moveTo(stepper3Position);
    stepper4.moveTo(stepper4Position);

    while (stepper1.currentPosition() != stepper1Position ||
           stepper2.currentPosition() != stepper2Position ||
           stepper3.currentPosition() != stepper3Position ||
           stepper4.currentPosition() != stepper4Position) {
        stepper1.run();
        stepper2.run();
        stepper3.run();
        stepper4.run();
    }
    delay(100);
    gripperServo.write(data[6]);
    delay(300);
}

void homing() {
    homeStepper(stepper4, limitSwitch4, 1500, 0);
    homeStepper(stepper3, limitSwitch3, -500, -800);
    homeStepper(stepper2, limitSwitch2, 500, 100);
    homeStepper(stepper1, limitSwitch1, 500, 100);
}

void homeStepper(AccelStepper &stepper, int limitSwitch, int speed, int targetPosition) {
    while (digitalRead(limitSwitch) != (speed > 0 ? 1 : 0)) {
        stepper.setSpeed(speed);
        stepper.runSpeed();
        stepper.setCurrentPosition(targetPosition);
    }
    delay(20);
    stepper.moveTo(targetPosition);
    while (stepper.currentPosition() != targetPosition) {
        stepper.run();
    }
}
